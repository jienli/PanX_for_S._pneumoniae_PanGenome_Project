"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _seqs = require("./seqs");

var _seqs2 = _interopRequireDefault(_seqs);

var _extend2 = require("./utils/extend");

var _extend3 = _interopRequireDefault(_extend2);

var _parser = require("./parser");

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Fasta = void 0;
exports.default = Fasta = {

  getMeta: _seqs2.default.getMeta,

  extend: function extend(metaParser) {
    var customFasta = (0, _extend3.default)(Fasta);
    Fasta.getMeta = metaParser;
    return customFasta;
  },
  parse: function parse(text) {
    var seqs = [];

    // catch empty string
    if (!text || text.length === 0) {
      return [];
    }

    if (Object.prototype.toString.call(text) !== '[object Array]') {
      text = text.split("\n");
    }

    var _Fasta = Fasta;
    var getMeta = _Fasta.getMeta;


    for (var i = 0; i < text.length; i++) {
      // check for header
      var line = text[i];
      if (line[0] === ">" || line[0] === ";") {

        var label = line.slice(1).trim();
        // extract IDs and push them to the meta dict
        var obj = getMeta(label.trim());
        label = obj.name;
        var id = obj.id || seqs.length;
        var currentSeq = new _seqs2.default.model("", obj.name, id);
        currentSeq.ids = obj.ids || {};
        currentSeq.details = obj.details || {};
        seqs.push(currentSeq);
      } else {
        currentSeq.seq += line;
      }
    }
    return seqs;
  },
  write: function write(seqs, access) {
    var text = "";
    for (var i = 0; i < seqs.length; i++) {
      var seq = seqs[i];
      if (access != null) {
        seq = access(seq);
      }
      //FASTA header
      text += ">" + seq.name + "\n";
      // seq
      text += _seqs2.default.splitNChars(seq.seq, 80).join("\n");

      text += "\n";
    }
    return text;
  }
};

_parser2.default.mixin(Fasta);