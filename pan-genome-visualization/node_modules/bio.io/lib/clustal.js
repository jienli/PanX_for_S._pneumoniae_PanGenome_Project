"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _parser = require("./parser");

var _parser2 = _interopRequireDefault(_parser);

var _seqs = require("./seqs");

var _seqs2 = _interopRequireDefault(_seqs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Clustal = void 0;
exports.default = Clustal = {
  parse: function parse(text) {
    var seqs = [];

    if (Object.prototype.toString.call(text) === '[object Array]') {
      var lines = text;
    } else {
      var lines = text.split("\n");
    }

    // The first line in the file must start with the words "CLUSTAL"
    if (lines[0].slice(0, 6) === !"CLUSTAL") {
      throw new Error("Invalid CLUSTAL Header");
    }

    var k = 0;
    // 0: reading sequences, 1: reading new lines
    var blockstate = 1;
    // count the sequence for every block
    var seqCounter = 0;

    while (k < lines.length) {
      k++;
      var line = lines[k];

      if (!(line != null) || line.length === 0) {
        blockstate = 1;
        continue;
      }

      // okay we have an empty line
      if (line.trim().length === 0) {
        blockstate = 1;
        continue;
      } else {
        // ignore annotations
        if (_seqs2.default.contains(line, "*")) {
          continue;
        }
        if (blockstate === 1) {
          // new block recognized - reset
          seqCounter = 0;
          blockstate = 0;
        }

        var regex = /^(?:\s*)(\S+)(?:\s+)(\S+)(?:\s*)(\d*)(?:\s*|$)/g;
        var match = regex.exec(line);
        if (match != null) {
          var label = match[1].trim();
          var sequence = match[2].trim();

          // check for the first block
          if (seqCounter >= seqs.length) {

            var obj = _seqs2.default.getMeta(label.trim());
            label = obj.name;

            var cSeq = new _seqs2.default.model(sequence, label, seqCounter);
            cSeq.ids = obj.ids || {};
            cSeq.details = obj.details || {};

            var keys = Object.keys(cSeq.ids);
            if (keys.length > 0) {
              cSeq.id = cSeq.ids[keys[0]];
            }
            seqs.push(cSeq);
          } else {
            seqs[seqCounter].seq += sequence;
          }

          seqCounter++;
        } else {
          console.log("parse error", line);
        }
      }
    }

    return seqs;
  }
};


_parser2.default.mixin(Clustal);