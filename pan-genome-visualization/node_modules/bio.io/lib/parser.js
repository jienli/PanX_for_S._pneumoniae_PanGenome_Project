"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var xhr = require('request');
var GenericReader = {};

exports.default = GenericReader;

// returns a promise if callback is undefined

GenericReader.read = function (url, callback) {
  var onret = function (_this) {
    return function (err, response, text) {
      return GenericReader._onRetrieval(err, text, callback, _this);
    };
  }(this);

  if (typeof callback === "undefined") {
    return new Promise(function (resolve, reject) {
      callback = function callback(err, res) {
        if (err) {
          reject(err);
        } else {
          resolve(res);
        }
      };
      xhr(url, onret);
    });
  } else {
    return xhr(url, onret);
  }
};

GenericReader._onRetrieval = function (err, text, callback, _this) {
  var rText = void 0;
  if (typeof err !== "undefined") {
    rText = _this.parse(text);
  }
  return callback.call(_this, err, rText);
};

// provide a convenient shortcut to inherit
GenericReader.extend = function (obj, statics) {
  return extend(GenericReader, obj, statics);
};
// Mixin utility
GenericReader.mixin = function (proto) {
  var exports = ['read'];
  if ((typeof proto === "undefined" ? "undefined" : _typeof(proto)) !== "object") {
    proto = proto.prototype;
  }
  exports.forEach(function (name) {
    proto[name] = GenericReader[name];
  }, this);
  return proto;
};